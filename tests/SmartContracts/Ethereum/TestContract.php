<?php

namespace Tests\SmartContracts\Ethereum;

use O21\CryptoWallets\Models\EthereumCall;
use O21\CryptoWallets\SmartContracts\Ethereum\AbstractSmartContract;

class TestContract extends AbstractSmartContract
{
    public const ABI_JSON = <<<ABI
[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"_index","type":"uint256"},{"indexed":false,"internalType":"string","name":"text","type":"string"}],"name":"NewJoke","type":"event"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getJoke","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_joke_text","type":"string"}],"name":"joke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"joke_count","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"jokes","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]
ABI;

    public const BYTECODE = <<<byteCode
0x608060405234801561001057600080fd5b506106c5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806370eea42f14610051578063a64d49981461006d578063ac6474201461009d578063b99505ec146100cd575b600080fd5b61006b600480360381019061006691906103c3565b6100eb565b005b61008760048036038101906100829190610446565b610167565b604051610094919061050c565b60405180910390f35b6100b760048036038101906100b29190610446565b610207565b6040516100c4919061050c565b60405180910390f35b6100d56102ab565b6040516100e2919061053d565b60405180910390f35b81816000806001548152602001908152602001600020919061010e9291906102b1565b506001547faef09189113607fcab035a14de2869f5dbd610add75d73103eb4d43474d3d2948383604051610143929190610594565b60405180910390a26001600081548092919061015e906105e7565b91905055505050565b600060205280600052604060002060009150905080546101869061065e565b80601f01602080910402602001604051908101604052809291908181526020018280546101b29061065e565b80156101ff5780601f106101d4576101008083540402835291602001916101ff565b820191906000526020600020905b8154815290600101906020018083116101e257829003601f168201915b505050505081565b606060008083815260200190815260200160002080546102269061065e565b80601f01602080910402602001604051908101604052809291908181526020018280546102529061065e565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b50505050509050919050565b60015481565b8280546102bd9061065e565b90600052602060002090601f0160209004810192826102df5760008555610326565b82601f106102f857803560ff1916838001178555610326565b82800160010185558215610326579182015b8281111561032557823582559160200191906001019061030a565b5b5090506103339190610337565b5090565b5b80821115610350576000816000905550600101610338565b5090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126103835761038261035e565b5b8235905067ffffffffffffffff8111156103a05761039f610363565b5b6020830191508360018202830111156103bc576103bb610368565b5b9250929050565b600080602083850312156103da576103d9610354565b5b600083013567ffffffffffffffff8111156103f8576103f7610359565b5b6104048582860161036d565b92509250509250929050565b6000819050919050565b61042381610410565b811461042e57600080fd5b50565b6000813590506104408161041a565b92915050565b60006020828403121561045c5761045b610354565b5b600061046a84828501610431565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104ad578082015181840152602081019050610492565b838111156104bc576000848401525b50505050565b6000601f19601f8301169050919050565b60006104de82610473565b6104e8818561047e565b93506104f881856020860161048f565b610501816104c2565b840191505092915050565b6000602082019050818103600083015261052681846104d3565b905092915050565b61053781610410565b82525050565b6000602082019050610552600083018461052e565b92915050565b82818337600083830152505050565b6000610573838561047e565b9350610580838584610558565b610589836104c2565b840190509392505050565b600060208201905081810360008301526105af818486610567565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105f282610410565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610624576106236105b8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061067657607f821691505b6020821081036106895761068861062f565b5b5091905056fea2646970667358221220d31b9e4585b3aa408f94ef1137ffa0d39be9899973df1790f17e13a1b758b9f264736f6c634300080d0033
byteCode;

    public static function getAbi(): array
    {
        return json_decode(
            self::ABI_JSON,
            false,
            512,
            JSON_THROW_ON_ERROR
        );
    }

    public static function getByteCode(): string
    {
        return self::BYTECODE;
    }

    public function joke(
        string $text,
        ?string $from = null,
        ?string &$error = null
    ): ?string {
        $this->assertDeployed();

        $hash = null;
        $from ??= $this->ethCall('coinbase');

        $this->contract->send(
            'joke',
            $text,
            (new EthereumCall($from))->toArray(),
            function ($err, $txid) use (&$error, &$hash) {
                $error = $err;
                $hash = $txid;
            }
        );

        return $hash;
    }

    public function getJoke(int $index): ?string
    {
        return first($this->call('getJoke', true, $index));
    }

    protected function getLogParameterTypes(): array
    {
        return [
            'joke_text' => 'string',
            'index' => 'uint256'
        ];
    }
}